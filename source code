import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 1: Load dataset
df = pd.read_csv("stock data 5yrs.csv")

# Step 2: Select a company (e.g., Apple Inc.)
company_df = df[df['Name'] == 'AAPL'].copy()

# Step 3: Use only the 'close' price for prediction
data = company_df[['close']]
data = data.reset_index(drop=True)

# Step 4: Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Step 5: Create sequences
def create_dataset(dataset, time_step=60):
    X, y = [], []
    for i in range(time_step, len(dataset)):
        X.append(dataset[i-time_step:i, 0])
        y.append(dataset[i, 0])
    return np.array(X), np.array(y)

time_step = 60
X, y = create_dataset(scaled_data, time_step)

# Reshape input to [samples, time steps, features]
X = X.reshape(X.shape[0], X.shape[1], 1)

# Step 6: Split into train/test sets
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Step 7: Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 8: Train the model
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=32)

# Step 9: Make predictions
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse scaling
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)
y_train_actual = scaler.inverse_transform(y_train.reshape(-1, 1))
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# Step 10: Plot predictions
plt.figure(figsize=(12,6))
plt.plot(np.arange(len(y_train_actual)), y_train_actual, label='Train Actual')
plt.plot(np.arange(len(train_predict)), train_predict, label='Train Predicted')
plt.plot(np.arange(len(y_train_actual), len(y_train_actual) + len(y_test_actual)), y_test_actual, label='Test Actual')
plt.plot(np.arange(len(train_predict), len(train_predict) + len(test_predict)), test_predict, label='Test Predicted')
plt.title('AAPL Stock Price Prediction (Kaggle Data)')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.show()
